// Use modern ES Module import syntax
// import 'dotenv/config'; 
import * as dotenv from 'dotenv';
dotenv.config({ path: '../../.env' });

import pg from 'pg';

// Destructure the Pool class from the imported pg object
const { Pool } = pg;

// Database configuration loaded from environment variables
const dbConfig = {
    user: process.env.PGUSER,
    password: process.env.PGPASSWORD,
    host: process.env.PGHOST,
    port: process.env.PGPORT,
    // Using the agreed-upon database name
    database: process.env.PGDATABASE, 
    // Recommended setting for production environments
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
};

// Create a new connection pool
const pool = new Pool(dbConfig);

// SQL command to drop and recreate the table
const createTableQuery = `
    DROP TABLE IF EXISTS custom_items;

    CREATE TABLE custom_items (
        id SERIAL PRIMARY KEY,
        
        -- Basic identification fields
        item_name VARCHAR(255) NOT NULL,
        base_type VARCHAR(50) NOT NULL,
        submitted_by VARCHAR(255) NOT NULL,
        
        -- Customization features (Example fields)
        exterior_color VARCHAR(50) NOT NULL,
        rim_style VARCHAR(50) NOT NULL,
        interior_package VARCHAR(50) NOT NULL,

        -- Dynamic price and date tracking
        total_price NUMERIC(10, 2) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
`;

/**
 * Executes the database reset script: drops the table and recreates it.
 */
async function resetDatabase() {
    console.log(`\nAttempting to reset database '${dbConfig.database}'...`);
    let client;
    try {
        // Connect to the database
        client = await pool.connect();
        
        // Execute the SQL commands
        await client.query(createTableQuery);

        console.log("‚úÖ Database reset successful! 'custom_items' table created.");

    } catch (error) {
        // If the database does not exist, this error will fire.
        if (error.code === '3D000') {
            console.error(`\nüö® ERROR: Database '${dbConfig.database}' does not exist.`);
            console.error(`Please create the database first using 'createdb ${dbConfig.database}' in your terminal.`);
        } else {
            console.error(`\n‚ùå An error occurred during database reset:`, error.message);
        }
        process.exit(1); // Exit with an error code
    } finally {
        // Release the client back to the pool
        if (client) {
            client.release();
        }
        // End the pool after the operation is complete
        await pool.end();
    }
}

// Execute the function
resetDatabase();

