import express from 'express';
import cors from 'cors';
// Ensure .env is loaded for configuration
import 'dotenv/config'; 

// Import the database pool to run queries
import { pool } from './config/db.js'; 

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json()); // Parses incoming JSON payloads

// --- API Endpoints ---

// 1. GET /custom_items (Retrieve all items)
app.get('/custom_items', async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM custom_items ORDER BY created_at DESC');
        res.status(200).json(result.rows);
    } catch (error) {
        console.error('Error fetching custom items:', error);
        res.status(500).json({ error: 'Failed to fetch items.' });
    }
});

// 2. POST /custom_items (Create a new item)
app.post('/custom_items', async (req, res) => {
    // We will implement complex validation and price calculation here later
    const { item_name, base_type, submitted_by, exterior_color, rim_style, interior_package, total_price } = req.body;
    
    // ðŸš¨ NOTE: Client-side validation for "impossible combos" must be done BEFORE this POST request
    // and/or repeated here for security. For now, we assume valid data.

    try {
        const insertQuery = `
            INSERT INTO custom_items 
                (item_name, base_type, submitted_by, exterior_color, rim_style, interior_package, total_price)
            VALUES 
                ($1, $2, $3, $4, $5, $6, $7)
            RETURNING *;
        `;
        const values = [item_name, base_type, submitted_by, exterior_color, rim_style, interior_package, total_price];
        const result = await pool.query(insertQuery, values);
        
        res.status(201).json(result.rows[0]);
    } catch (error) {
        console.error('Error creating custom item:', error);
        res.status(500).json({ error: 'Failed to create item.' });
    }
});

// We will add GET /custom_items/:id, PUT /custom_items/:id, and DELETE /custom_items/:id later.

// Start the server
app.listen(PORT, () => {
    console.log(`Server listening on port ${PORT}`);
});

